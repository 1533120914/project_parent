{"ast":null,"code":"// 导入axios\nimport axios from 'axios';\n// 导入加载状态组件 - 用于在每次请求之前显示加载状态\nimport { Loading } from \"element-ui\";\n// 导入消息组件 - 用于在请求出错的时候弹出错误消息\nimport { Message } from 'element-ui';\n// 创建axios实例, 并命名为http\nconst http = axios.create({\n  // 后端的基础URL地址\n  baseURL: 'http://localhost:8888/',\n  // 设置请求头 - 用于POST请求,如果不设置,那么POST请求后端无法取到数据\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n  },\n  // 设置请求超时时长 - 如果15秒钟后端没有响应, 请求就结束\n  timeout: 15000\n  // 是否携带Cookie\n  // withCredentials:true\n});\n// 定义一个全局的loading变量, 用于存储loading对象\nlet loading;\n// 设置请求的前置拦截器\nhttp.interceptors.request.use(config => {\n  // 在每次请求发送之前显示加载状态\n  loading = Loading.service({\n    lock: true,\n    text: \"加载中...\",\n    // 加载状态上的文字\n    spinner: \"el-icon-loading\",\n    // 加载状态上的图标\n    background: \"rgba(0,0,0,0.2)\" // 加载状态的背景颜色\n  });\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n// 设置请求的后置拦截器\nhttp.interceptors.response.use(response => {\n  loading.close(); // 关闭加载状态\n  let data = response.data; // 获取请求体中的数据\n  if (data.code === '000000') {\n    // 请求成功\n    if (data.data) {\n      // 判断是否有数据返回\n      return data.data; // 把数据交给Axios\n    } else {\n      // 如果没有数据返回, 显示成功消息\n      Message.success({\n        showClose: true,\n        message: data.msg\n      });\n    }\n  } else {\n    Message.error({\n      showClose: true,\n      message: `${data.code}:${data.msg}`\n    });\n    return Promise.reject(data);\n  }\n}, error => {\n  // http请求失败\n  loading.close();\n  if (error && error.response) {\n    //对各种响应码做提示，也可进行其它操作\n    switch (error.response.status) {\n      case 404:\n        Message.error({\n          showClose: true,\n          message: '404:找不到资源!'\n        });\n        break;\n      case 500:\n        Message.error({\n          showClose: true,\n          message: '500:服务器出错!'\n        });\n        break;\n      default:\n        Message.error({\n          showClose: true,\n          message: '请求失败,请稍后再试'\n        });\n    }\n  } else {\n    Message.error({\n      showClose: true,\n      message: '检查网络'\n    });\n  }\n  return Promise.reject(error);\n});\n// 导出http对象\nexport default http;","map":{"version":3,"names":["axios","Loading","Message","http","create","baseURL","headers","timeout","loading","interceptors","request","use","config","service","lock","text","spinner","background","error","Promise","reject","response","close","data","code","success","showClose","message","msg","status"],"sources":["C:/Users/常/IdeaProjects/project_parent/urban-traffic-management/front-end-utm/src/api/http.js"],"sourcesContent":["// 导入axios\r\nimport axios from 'axios';\r\n// 导入加载状态组件 - 用于在每次请求之前显示加载状态\r\nimport { Loading } from \"element-ui\";\r\n// 导入消息组件 - 用于在请求出错的时候弹出错误消息\r\nimport { Message } from 'element-ui';\r\n// 创建axios实例, 并命名为http\r\nconst http = axios.create({\r\n    // 后端的基础URL地址\r\n    baseURL: 'http://localhost:8888/',\r\n    // 设置请求头 - 用于POST请求,如果不设置,那么POST请求后端无法取到数据\r\n    headers: {'Content-Type':'application/x-www-form-urlencoded;charset=UTF-8'},\r\n    // 设置请求超时时长 - 如果15秒钟后端没有响应, 请求就结束\r\n    timeout: 15000,\r\n    // 是否携带Cookie\r\n    // withCredentials:true\r\n})\r\n// 定义一个全局的loading变量, 用于存储loading对象\r\nlet loading;\r\n// 设置请求的前置拦截器\r\nhttp.interceptors.request.use(\r\n    (config) => {\r\n        // 在每次请求发送之前显示加载状态\r\n        loading = Loading.service({\r\n            lock: true,\r\n            text: \"加载中...\", // 加载状态上的文字\r\n            spinner: \"el-icon-loading\", // 加载状态上的图标\r\n            background: \"rgba(0,0,0,0.2)\" // 加载状态的背景颜色\r\n        });\r\n        return config\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n// 设置请求的后置拦截器\r\nhttp.interceptors.response.use(\r\n    (response) => {\r\n        loading.close(); // 关闭加载状态\r\n        let data = response.data // 获取请求体中的数据\r\n        if(data.code === '000000') { // 请求成功\r\n            if (data.data) { // 判断是否有数据返回\r\n                return data.data // 把数据交给Axios\r\n            }else { // 如果没有数据返回, 显示成功消息\r\n                Message.success({\r\n                    showClose: true,\r\n                    message:data.msg\r\n                })\r\n            }\r\n        }else {\r\n            Message.error({\r\n                showClose:true,\r\n                message:`${data.code}:${data.msg}`\r\n            })\r\n            return Promise.reject(data)\r\n        }\r\n    },\r\n    (error) => { // http请求失败\r\n        loading.close();\r\n        if (error && error.response) {//对各种响应码做提示，也可进行其它操作\r\n            switch (error.response.status) {\r\n                case 404:\r\n                    Message.error({\r\n                        showClose:true,\r\n                        message:'404:找不到资源!'\r\n                    })\r\n                    break\r\n                case 500:\r\n                    Message.error({\r\n                        showClose:true,\r\n                        message:'500:服务器出错!'\r\n                    })\r\n                    break\r\n                default:\r\n                    Message.error({\r\n                        showClose:true,\r\n                        message:'请求失败,请稍后再试'\r\n                    })\r\n            }\r\n        } else {\r\n            Message.error({\r\n                showClose:true,\r\n                message:'检查网络'\r\n            })\r\n        }\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n// 导出http对象\r\nexport default http;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,OAAO,QAAQ,YAAY;AACpC;AACA,SAASC,OAAO,QAAQ,YAAY;AACpC;AACA,MAAMC,IAAI,GAAGH,KAAK,CAACI,MAAM,CAAC;EACtB;EACAC,OAAO,EAAE,wBAAwB;EACjC;EACAC,OAAO,EAAE;IAAC,cAAc,EAAC;EAAiD,CAAC;EAC3E;EACAC,OAAO,EAAE;EACT;EACA;AACJ,CAAC,CAAC;AACF;AACA,IAAIC,OAAO;AACX;AACAL,IAAI,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CACxBC,MAAM,IAAK;EACR;EACAJ,OAAO,GAAGP,OAAO,CAACY,OAAO,CAAC;IACtBC,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,QAAQ;IAAE;IAChBC,OAAO,EAAE,iBAAiB;IAAE;IAC5BC,UAAU,EAAE,iBAAiB,CAAC;EAClC,CAAC,CAAC;;EACF,OAAOL,MAAM;AACjB,CAAC,EACAM,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AACD;AACAf,IAAI,CAACM,YAAY,CAACY,QAAQ,CAACV,GAAG,CACzBU,QAAQ,IAAK;EACVb,OAAO,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC;EACjB,IAAIC,IAAI,GAAGF,QAAQ,CAACE,IAAI,EAAC;EACzB,IAAGA,IAAI,CAACC,IAAI,KAAK,QAAQ,EAAE;IAAE;IACzB,IAAID,IAAI,CAACA,IAAI,EAAE;MAAE;MACb,OAAOA,IAAI,CAACA,IAAI,EAAC;IACrB,CAAC,MAAK;MAAE;MACJrB,OAAO,CAACuB,OAAO,CAAC;QACZC,SAAS,EAAE,IAAI;QACfC,OAAO,EAACJ,IAAI,CAACK;MACjB,CAAC,CAAC;IACN;EACJ,CAAC,MAAK;IACF1B,OAAO,CAACgB,KAAK,CAAC;MACVQ,SAAS,EAAC,IAAI;MACdC,OAAO,EAAE,GAAEJ,IAAI,CAACC,IAAK,IAAGD,IAAI,CAACK,GAAI;IACrC,CAAC,CAAC;IACF,OAAOT,OAAO,CAACC,MAAM,CAACG,IAAI,CAAC;EAC/B;AACJ,CAAC,EACAL,KAAK,IAAK;EAAE;EACTV,OAAO,CAACc,KAAK,CAAC,CAAC;EACf,IAAIJ,KAAK,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAAC;IAC1B,QAAQH,KAAK,CAACG,QAAQ,CAACQ,MAAM;MACzB,KAAK,GAAG;QACJ3B,OAAO,CAACgB,KAAK,CAAC;UACVQ,SAAS,EAAC,IAAI;UACdC,OAAO,EAAC;QACZ,CAAC,CAAC;QACF;MACJ,KAAK,GAAG;QACJzB,OAAO,CAACgB,KAAK,CAAC;UACVQ,SAAS,EAAC,IAAI;UACdC,OAAO,EAAC;QACZ,CAAC,CAAC;QACF;MACJ;QACIzB,OAAO,CAACgB,KAAK,CAAC;UACVQ,SAAS,EAAC,IAAI;UACdC,OAAO,EAAC;QACZ,CAAC,CAAC;IACV;EACJ,CAAC,MAAM;IACHzB,OAAO,CAACgB,KAAK,CAAC;MACVQ,SAAS,EAAC,IAAI;MACdC,OAAO,EAAC;IACZ,CAAC,CAAC;EACN;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AACD;AACA,eAAef,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}